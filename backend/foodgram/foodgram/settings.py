""" Спринт 14 Проект «Продуктовый помощник»
Автор   Фредди Андрес Парра
        Студент факультета Бэкенд. Когорта 14+

Django settings for foodgram project.
Generated by 'django-admin startproject' using Django 2.2.28.

Примечание: каждой конфигурации присваивается номер
(последовательный порядок в том, как она была настроена):
    1. Регистрация приложений: foodgram_app в рамках проекта (INSTALLED_APPS).
    2. Настройки шаблонизатора Django (TEMPLATES).
    3. Указание каталогов статических файлов. (STATICFILES_DIRS).
    4. Настройка базы данных (DATABASES).
    5. Пользовательский сервис (INSTALLED_APPS).
    6. Регистрация приложений: users в рамках проекта (INSTALLED_APPS).
    7. Язык сайта (LANGUAGE_CODE).
    8. Регистрация приложений: core в рамках проекта (INSTALLED_APPS).
    9. Страницы надо показывать пользователю после входа в аккаунт
       и при выходе из него: LOGIN_URL и LOGIN_DIRECT_URL.
    10. Регистрация приложений: about в рамках проекта (INSTALLED_APPS).
    11. Сохранение писем в файлы (EMAIL_BACKEND и EMAIL_FILE_PATH).
    12. Определяется количество рецептов на странице для главной страницы (NUM_RECIPES_PAGE).
    13. Контекст-процессоры (TEMPLATES/context_processors) и core/context_processors.
    14. Определяет количество рецептов на странице для страницы профиля пользователя (автора) (NUM_RECIPESAUTHOR_PAGE).
    15. Приложение для работы с графикой (библиотека sorl-thumbnail) и графическая библиотека (pillow).
    16. Директории, куда будут загружаться файлы пользователей (media).
    17. Аутентификация на основе токенов.
    18. Аутентификация по JWT-токену.
    19. Путь до WSGI-модуля проекта.
"""
import os
from datetime import timedelta  # 18. Аутентификация по JWT-токену.

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    '*',
    'https://stolovyana.ddns.net/',
]

# 1. Регистрация приложений: foodgram_app в рамках проекта.
# 5. Пользовательский сервис.
# 6. Регистрация приложений: users в рамках проекта.
# 8. Регистрация приложений: core в рамках проекта.
# 10. Регистрация приложений: about в рамках проекта.
# 15. Приложение для работы с графикой (библиотека sorl-thumbnail)
#     и графическая библиотека (pillow).
# Начните с шага 1, 5, 6, 8, 10, 15, 17 и 18.
# -------------------------------------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',  # 5. Приложение для регистрации и авторизации пользователей
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'foodgram_app.apps.FoodgramAppConfig',  # 1. Регистрация приложения: Foodgram_app
    'users.apps.UsersConfig',  # 6. Регистрация приложения: users
    'core.apps.CoreConfig',  # 8. Регистрация приложения: core
    'about.apps.AboutConfig',  # 10. Регистрация приложения: about
    'sorl.thumbnail',  # 15. Регистрация приложения: sorl-thumbnail
    'rest_framework',  # 17. Аутентификация на основе токенов
    'rest_framework.authtoken',
    'djoser',  # 18. Аутентификация по JWT-токену.
    'django_filters',
]
# Завершите шаг 1, 5, 6, 8, 10, 15, 17 и 18.
# -------------------------------------------------------------------

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'foodgram.urls'

# 2. Настройки шаблонизатора Django
# 13. Контекст-процессоры (TEMPLATES/context_processors) и core/context_processors.
# Начните с шага 2 и 13.
# -------------------------------------------------------------------
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Добавлено: Искать шаблоны на уровне проекта
        'DIRS': [TEMPLATES_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                # Вот оно, нужное:
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.year.year',
            ]
        },
    }
]
# Завершите шаг 2 и 13.
# -------------------------------------------------------------------


# 19. Путь до WSGI-модуля проекта.
# Начните с шага 19.
# -------------------------------------------------------------------
WSGI_APPLICATION = 'foodgram.wsgi.application'
# Завершите шаг 19
# -------------------------------------------------------------------

CORS_ORIGIN_ALLOW_ALL = True
CORS_URLS_REGEX = r'^/api/.*$'

# 4. Настройка базы данных
# Начните с шага 4.
# -------------------------------------------------------------------
# SQLITE3
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    }
#}
# POSTGRESQL
DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', default='django.db.backends.postgresql'),
        'NAME': os.getenv('DB_NAME', default='foodgramdb'),
        'USER': os.getenv('POSTGRES_USER', default='foodgram_andres'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', default='foodgram_andres'),
        'HOST': os.getenv('DB_HOST', default='127.0.0.1'),
        'PORT': os.getenv('DB_PORT', default='5432')
    }
}
# Завершите шаг 4
# -------------------------------------------------------------------

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 17. Аутентификация на основе токенов
# Начните с шага 17.
# -------------------------------------------------------------------
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 6
}
# Завершите шаг 17.
# -------------------------------------------------------------------

# 18. Аутентификация по JWT-токену.
# Начните с шага 18.
# -------------------------------------------------------------------
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'AUTH_HEADER_TYPES': ('Bearer',),
}
# Завершите шаг 18.
# -------------------------------------------------------------------

DJOSER = {
    "LOGIN_FIELD": 'email',
    "SEND_ACTIVATION_EMAIL": False,
    'HIDE_USERS': False,
    "SERIALIZERS": {
        "user_create": "users.serializers.CustomUserCreateSerializer",
        "user": "users.serializers.CustomUserSerializer",
        "current_user": "users.serializers.CustomUserSerializer",
    },
    'PERMISSIONS': {
        'user': ['djoser.permissions.CurrentUserOrAdminOrReadOnly'],
        'user_list': ['rest_framework.permissions.AllowAny']
    },
}

# 7. Настройки шаблонизатора Django
# Начните с шага 7.
# -------------------------------------------------------------------
LANGUAGE_CODE = 'ru-ru'
# Завершите шаг 7.
# -------------------------------------------------------------------

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# 3. Указание каталогов статических файлов.
# Начните с шага 3.
# -------------------------------------------------------------------
STATIC_URL = '/foodgrambackend_static/'
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'foodgrambackend_static/')
# Завершите шаг 3.
# -------------------------------------------------------------------

# 9. Страницы надо показывать пользователю после входа в аккаунт
#    и при выходе из него.
# Начните с шага 9.
# -------------------------------------------------------------------
LOGIN_URL = 'users:login'
LOGIN_REDIRECT_URL = 'foodgram_app:index'
# LOGOUT_REDIRECT_URL = 'foodgram_app:index'
# Завершите шаг 9.
# -------------------------------------------------------------------

# 11. Сохранение писем в файлы.
# Начните с шага 11.
# -------------------------------------------------------------------
EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = os.path.join(BASE_DIR, 'sent_emails')
# Завершите шаг 11.
# -------------------------------------------------------------------

# 12. Определяется количество рецептов на странице для главной страницы.
# 14. Определяет количество рецептов на странице для страницы профиля пользователя (автора).
# Начните с шага 12 и 14.
# -------------------------------------------------------------------
NUM_RECIPES_PAGE = 6
NUM_RECIPESAUTHOR_PAGE = 10
# Завершите шаг 12 и 14.
# -------------------------------------------------------------------

# 16. Директории, куда будут загружаться файлы пользователей (media).
# Начните с шага 16.
# -------------------------------------------------------------------
MEDIA_URL = '/foodgrambackend_media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'foodgrambackend_media/')
# Завершите шаг 16.
# -------------------------------------------------------------------

AUTH_USER_MODEL = 'users.User'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
